<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fiber display DIC</key>
	<dict>
		<key>style</key>
		<string>Possible values of `style`:  0 or &apos;line&apos;  : line or cylinders for style=3 (this is the default), 1 or &apos;actin&apos; : actin-like rendering using beads for monomers, 2 or &apos;microtubule&apos; : microtubule-like rendering using beads for monomers.</string>
		<key>visible {display}</key>
		<string>Visibility flag</string>
		<key>color</key>
		<string>Color of fiber</string>
		<key>back_color</key>
		<string>Color of inner surfaces of cylinder in 3D display (set as color[1])</string>
		<key>hide_color</key>
		<string>Color for unselected objects, default=invisible (set as color[2])</string>
		<key>coloring</key>
		<string>If true, vary the colors used to display the fibers. This option is used to attribute a different color to each fiber, painting all the segments of the fiber with the same color.      Effects of `coloring`: 0 : no coloring, 1 : color fibers randomly, 2 : color fibers depending on direction, relative to `right_direction`, 3 : color fibers depending on the `mark`, 4 : color clusters defined by couple-connectivity, 5 : color fibers according to age.</string>
		<key>line_width</key>
		<string>Width of lines (also known as `line[0]` or `width`)</string>
		<key>line_style</key>
		<string>Style for lines (also known as `line[1]`).  Possible values of `line_style`:  0 : hide, 1 : plain lines, 2 : color rendering of longitudinal tensions, 3 : color rendering of local curvature, 4 : color rendering of the angular orientation relative to the X-axis</string>
		<key>line_caps</key>
		<string>If true, close the end of the fiber (valid only for style 3).      Possible values of `line_caps`: 0: leave fibers open (unfinished), 1: use a disc to make a flat end, 2: use a hemisphere to make a round end. </string>
		<key>point_size</key>
		<string>Diameter of points (also known as `point[0]` or `size`). `point_size` and `line_width` are normally set in pixels,  but if `display`:point_value is set, their value is understood  in multiples of `point_value`, which itself is a distance. For example, if you set line_width=2.5 and point_value=0.01, the fibers will be displayed with a diameter of 0.025. </string>
		<key>point_style {fiber}</key>
		<string>Style for display of points (also known as `point[1]`). Possible values for `point_style`: 0 : show nothing, 1 : show vertices, 2 : show arrowheads separated by `point_interval`, 3 : show middle point of each fiber</string>
		<key>point_interval</key>
		<string>Distance between arrows for `point_style=2` (also known as `point[2]`)</string>
		<key>end_style</key>
		<dict>
			<key>end_style {plus end}</key>
			<string>Style of fiber tips for PLUS_END. `end_style[0]` determines the style of the PLUS_END,  and `end_style[1]` the style of the MINUS_END. Possible end_style:  0 : hide, 1 : display a disc/sphere, 2: display a cone,  3 : display a disc, 4 : draw arrowhead, 5 : draw arrowhead in the inverted direction (for actin) </string>
			<key>end_style {minus end}</key>
			<string>Style of fiber tips for MINUS_END. `end_style[0]` determines the style of the PLUS_END,  and `end_style[1]` the style of the MINUS_END. Possible end_style:  0 : hide, 1 : display a disc/sphere, 2: display a cone,  3 : display a disc, 4 : draw arrowhead, 5 : draw arrowhead in the inverted direction (for actin) </string>
		</dict>
		<key>end_color {fiber}</key>
		<string> This determines the set of color that are used to display the fiber tips, according to their assembly state (Fiber::dynamicState): growing end (dynamic-state 1), use end_color[1], shrinking end (dynamic-state 4), use end_color[4]</string>
		<key>end_size</key>
		<dict>
			<key>end_size {plus end}</key>
			<string>size of fiber tips for PLUS_END</string>
			<key>end_size {minus end}</key>
			<string>size of fiber tips for MINUS_END</string>
		</dict>
		<key>lattice_style</key>
		<string>If true, specify the style for displaying lattice content (also known as `lattice[0]`)</string>
		<key>lattice_scale</key>
		<string>Defines the range of colors when displaying the lattice (also known as `lattice[1]`)</string>
		<key>lattice_rescale</key>
		<string>Rescale concentration for the cells at the edge of reduced length (???)</string>
		<key>label_style {fiber}</key>
		<string>Possible values for `speckle_style`: 0 : hide, 1 or 2 : name of fiber and index of vertices, 4 : abscissa along fiber</string>
		<key>speckle_size</key>
		<string>Size for speckle display (also know as `speckles`)</string>
		<key>speckle_style {fiber}</key>
		<string>Possible values for `speckle_style`: 0 : hide, 1 : random speckles, separated on average by `interval`, 2 : regular speckes, separated by `interval`.</string>
		<key>speckle_interval</key>
		<string>Average distance between speckles (also known as `speckles[2]`)</string>
		<key>exclude</key>
		<string>A bit-field to hide certain categories of fibers. Possible values for `exclude`: 0 : all fibers are displayed, 1 : show only right-pointing fibers, 2 : show only left-pointing fibers, 4 : show only counter-clockwise fibers, 8 : show only clockwise fibers. You may also address each bit directly, knowning that: 1st bit true: hide left-pointing fibers; 2nd bit true: hide right-pointing fibers; 3rd bit true: hide clockwise fibers; 4th bit true: hide counter-clockwise fibers</string>
		<key>exclude_axis</key>
		<string>The direction used for hiding left- or right-pointing fibers, etc. (known as `exclude[1]`)</string>
		<key>mask</key>
		<string>Number of bits equal to `1` in the mask_bitfield. This parameter can be used to hide a fraction of the fiber.
     Each fiber will be visible with a probability `1/2^mask`. `mask_bitfield&apos; is set randomly with `mask` bits set to 1, when the parameter is read.</string>
		<key>mask_bitfield</key>
		<string>Selection bitfield used to hide some fibers (known as `mask[1]`). `mask_bitfield` is a 32-bitfield that is compared to the signature of the object,  itself a random bitfield. The Object is hidden if the result is non-zero. So if `mask_bitfield` has many 1s, fewer filaments will be visible. Note that `mask_bitfield&apos; is set randomly if `mask` is given.</string>
		<key>tension_scale</key>
		<string>Conversion coefficient from tension to color, for `line_style==2`. The values of `tension_scale` determines how longitudinal tensions are displayed: tension_scale &lt; 0 : compressive forces are highlighted, tension_scale &gt; 0 : tensile forces are highlighted.  A longitudinal tension equal to `tension_scale` will be displayed with a blue tint,  while a value three times higher will be displayed red. Lower tension_scale values will yield brighter colors for the same force in the fiber.</string>
		<key>force_scale</key>
		<string>( if &gt; 0 ) display the net forces FP acting on vertices. A force F acting on a vertex is displayed as segments of length `force_scale * F`. A color can be specified as forces[1]</string>
		<key>force_color</key>
		<string>This color is specified as forces[1]</string>
		<key>explode</key>
		<string>The &apos;explosion&apos; effect shift the fibers in space. This can be useful to visualize dense regions, but is only implemented for style=2</string>
		<key>explode_range</key>
		<string>Amount of lateral shift to separate fibers when display is exploded (known as `explode[1]`)</string>
		<key>draw_average</key>
		<string>If true, display the average fiber. The &apos;average fiber&apos; is calculated from the centroid of the fiber tips, and the centroid of the polymer mass. It is useful to evaluate the amount of order in the network.</string>
	</dict>
</dict>
</plist>
